// Asher Lozano
// 1/16/21
// CSE 143
// TA Melody Lam

// This code models a GuitarString in a way of vibrating strings with a given frequency
// you are able to pluck a GuitarString, create, tic and sample a GuitarString
import java.util.*;

public class GuitarString {

    public static final int SAMPLE_RATE = StdAudio.SAMPLE_RATE;
    public static final double DECAY = .996;
    private Queue<Double> ringBuffer;

// This method for GuitarString uses the parameter frequency creating a GuitarString. 
// When the parameter is equal to or less then 0 it throws an IllegalArgumentException, 
// when the sample rate divided by frequency is less than 2 it also throws
// another IllegalArgumentException. It also adds to the zeros to the ringBuffer
    public GuitarString (double frequency) {
        if (frequency <= 0) {
            throw new IllegalArgumentException();
        }
        int N = (int)(Math.round(SAMPLE_RATE / frequency)); 
        if (N < 2) {
            throw new IllegalArgumentException();
        }
        ringBuffer = new LinkedList<>();
        for (int i = 0; i < N; i++) {
            ringBuffer.add(0.0);
        }

    }


// This method also creates a GuitarString but with the parameter of an array init throwing
// an IllegalArgumentException if the length of the array is less than 2. Then it will also
// add zeros to the ring buffer
    public GuitarString (double[] init) {
        if (init.length < 2) {
            throw new IllegalArgumentException();
        }
        ringBuffer = new LinkedList<>();
        for (int i = 0; i < init.length; i++){
            ringBuffer.add(init[i]);
        }
    }


// This method pluck replaces the current values in the ringBuffer to random
// values from -.5 to .5 excluding .5
    public void pluck () {
        for (int i = 0; i < ringBuffer.size(); i++) {
            ringBuffer.remove();
            ringBuffer.add(Math.random() - 0.5);
        }
    }

// The tic method removes the first number in the ringBuffer and inserts the average
// of the first and second numbers times the decay to the back
    public void tic () {
        double first = ringBuffer.remove();
        double second = ringBuffer.peek();
        double average = DECAY * ((first + second) / 2);
        ringBuffer.add(average);
    }

// The method sample returns the value from the front of the RingBuffer
    public double sample () {
        return ringBuffer.peek();
    }
}
