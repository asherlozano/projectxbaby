//Asher Lozano
//10/17/20
//CSE 142
//TA: Michelle Jose Morris
//Take-Home Assessment #3

//This code will draw the CafeWall using parameters, nested
//for loops and the changeable MORTAR and offset to 
//create an illusion

import java.awt.*;
public class CafeWall {
    //MORTAR is the small space in between the lines
    public static final int MORTAR = 2;
    public static void main(String [] args) {
        DrawingPanel panel = new DrawingPanel(650, 400);
        panel.setBackground(Color.GRAY);
        Graphics pen = panel.getGraphics();
        //Draws the rows using the parameters, rows, starting postions, and size
        drawRow(pen, 4, 0, 0, 20);
        drawRow(pen, 5, 50, 70, 30);
        //Draws  the grids using the parameters, columns and rows, starting postions,
        //size, and then offset
        drawGrids(pen, 2, 400, 20, 35, 35);
        drawGrids(pen, 4, 10, 150, 25, 0);
        drawGrids(pen, 3, 250, 200, 25, 10);
        drawGrids(pen, 5, 425, 180, 20, 10);
    }

    //Uses the graphics pen to draw both the black and white squares with the amount of rows,
    //starting location, and size of the squares
    public static void drawRow(Graphics pen, int rows, int x, int y, int size) {
        //draws the amount of rows  
        for(int i = 1; i <= rows; i++){
            pen.setColor(Color.BLACK);
            pen.fillRect(x + ((i - 1) *  2 * size), y, size, size);
            pen.setColor(Color.BLUE);
            pen.drawLine(x + ((i - 1) * 2 * size), y, x + size + 
                        ((i - 1) * 2 * size), y + size);
            pen.drawLine(x + size + ((i - 1) * 2 * size), y, x + 
                        ((i - 1) * 2 * size), y + size);
            pen.setColor(Color.WHITE);
            pen.fillRect(x + size + ((i - 1) * size * 2), y, size, size);
        }
    }

    //draws a grid with the amount of columns, rows, starting positions, size, and offset
    public static void drawGrids(Graphics pen, int rows, int x, 
                                 int y, int size, int offset){
        //draws the amount of columns needed
        for(int i = 1; i <= rows; i++){
            drawRow(pen, rows, x, y + ((size * 2) + MORTAR * 2) * (i - 1) , size);
            drawRow(pen, rows, x + offset, y + size + MORTAR + 
                    ((size * 2) + MORTAR * 2) * (i - 1), size);
        }
    }
}
